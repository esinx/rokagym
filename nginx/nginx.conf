events {
    worker_connections 1024;
}

http {
    client_max_body_size 2000M;
    upstream frontend {
        server host.docker.internal:3000;
    }
    upstream backend {
        server host.docker.internal:3030;
    }
    server {
        listen 80;
        listen [::]:80;
        return 301 https://$host$request_uri;
    }
    server {
        listen 443 ssl;
        listen [::]:443 ssl;

        server_name 3000.localhost.net;
        ssl_certificate /certs/_wildcard.localhost.net.pem;
        ssl_certificate_key /certs/_wildcard.localhost.net-key.pem;
        location / {
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-Host $host;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header Host $http_host;
            proxy_redirect off;
            proxy_pass http://frontend;
            # websocket support
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection "Upgrade";
        }
    }
    server {
        listen 443 ssl;
        listen [::]:443 ssl;

        server_name 3030.localhost.net;
        ssl_certificate /certs/_wildcard.localhost.net.pem;
        ssl_certificate_key /certs/_wildcard.localhost.net-key.pem;
        location / {
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-Host $host;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header Host $http_host;
            proxy_redirect off;
            proxy_pass http://backend;
        }
    }
    include /etc/nginx/mime.types;
}
